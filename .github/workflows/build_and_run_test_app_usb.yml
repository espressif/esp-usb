# This is a reusable workflow which builds and runs target tests:
#
#   - device
#     - esp_tinyusb test apps -> runner tag: usb_device
#   - host
#     - class drivers test apps -> runner tag: usb_host
#     - class driver examples -> only build

name: Build and Run USB Test Application

on:
  workflow_call:
    inputs:
      idf_releases:
        description: 'The JSON array of idf releases to build and run'
        required: true
        type: string
      idf_targets:
        description: 'The JSON array of targets for target runners'
        required: true
        type: string

jobs:
  build:
    name: Build USB apps
    strategy:
      matrix:
        idf_ver: ${{ fromJson(inputs.idf_releases) }}
        test_app: ["device", "host_native", "host_managed"]
        include:
          # Add build paths
          - test_app: device
            path: device/esp_tinyusb
            usb_comp_managed: "no"  # For the completeness
          - test_app: host_native
            path: host
            usb_comp_managed: "no"
          - test_app: host_managed
            path: host
            usb_comp_managed: "yes"
        exclude:
          # Exclude using managed usb component for older releases, only with service releases
          - test_app: host_managed
            idf_ver: "release-v5.1"
          - test_app: host_managed
            idf_ver: "release-v5.2"
          - test_app: host_managed
            idf_ver: "release-v5.3"
          # Exclude native usb component for IDF >= 6 (usb component has been removed from esp-idf)
          - test_app: host_native
            idf_ver: "release-v6.0"
          - test_app: host_native
            idf_ver: "latest"

    runs-on: ubuntu-latest
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Build USB Test Application
        shell: bash
        run: |
          . ${IDF_PATH}/export.sh
          git config --global safe.directory $(pwd)
          pip install idf-build-apps==2.12.2 --upgrade
          export PEDANTIC_FLAGS="-DIDF_CI_BUILD -Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
          export EXTRA_CFLAGS="${PEDANTIC_FLAGS} -Wstrict-prototypes"
          export EXTRA_CXXFLAGS="${PEDANTIC_FLAGS}"
          export ENV_VAR_USB_COMP_MANAGED=${{ matrix.usb_comp_managed }}

          idf-build-apps find --paths ${{ matrix.path }}
          idf-build-apps build --paths ${{ matrix.path }}
      - uses: actions/upload-artifact@v4
        with:
          name: usb_${{ matrix.test_app }}_test_app_bin_${{ matrix.idf_ver }}
          path: |
            **/build_esp*/bootloader/bootloader.bin
            **/build_esp*/partition_table/partition-table.bin
            **/build_esp*/test_app_*.bin
            **/build_esp*/test_app_*.elf
            **/build_esp*/flasher_args.json
            **/build_esp*/config/sdkconfig.json
          if-no-files-found: error

  run:
    name: Run TestApps on target
    if: ${{ github.repository_owner == 'espressif' }}
    needs: build
    strategy:
      matrix:
        idf_ver: ${{ fromJson(inputs.idf_releases) }}
        idf_target: ${{ fromJson(inputs.idf_targets) }}
        test_app: ["device", "host_native", "host_managed"]
        runner_tag: ["usb_device", "usb_host", "usb_host_flash_disk"]

        exclude:
          # Exclude runner_tag <-> test_app combinations
          - test_app: device
            runner_tag: usb_host
          - test_app: device
            runner_tag: usb_host_flash_disk
          - test_app: host_native
            runner_tag: usb_device
          - test_app: host_native
            runner_tag: usb_host_flash_disk
          - test_app: host_managed
            runner_tag: usb_device
          # Exclude esp32p4 for releases before IDF 5.3 for all runner tags (esp32p4 support starts in IDF 5.3)
          - idf_ver: "release-v5.1"
            idf_target: "esp32p4"
          - idf_ver: "release-v5.2"
            idf_target: "esp32p4"
          # Exclude using managed usb component for older releases, only with service releases
          - test_app: host_managed
            idf_ver: "release-v5.1"
          - test_app: host_managed
            idf_ver: "release-v5.2"
          - test_app: host_managed
            idf_ver: "release-v5.3"
          # Exclude native usb component for IDF >= 6 (usb component has been removed from esp-idf)
          - test_app: host_native
            idf_ver: "release-v6.0"
          - test_app: host_native
            idf_ver: "latest"

    runs-on: [self-hosted, linux, docker, "${{ matrix.idf_target }}", "${{ matrix.runner_tag }}"]
    container:
      image: python:3.11-bookworm
      options: --privileged --device-cgroup-rule="c 188:* rmw" --device-cgroup-rule="c 166:* rmw"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: usb_${{ matrix.test_app }}_test_app_bin_${{ matrix.idf_ver }}
      - name: ⚙️ Install System tools
        run: |
          apt update
          apt install -y usbutils
      - name: Install Python packages
        env:
          PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi/"
        run: pip install --only-binary cryptography pytest-embedded pytest-embedded-serial-esp pytest-embedded-idf pyserial pyusb
      - name: Run USB Test App on target
        run: pytest --target=${{ matrix.idf_target }} -m ${{ matrix.runner_tag }} --build-dir=build_${{ matrix.idf_target }}_default
